# Detect the OS
if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
  if (FATAL_ERROR_IF_OS_WINDOW)
    message (FATAL_ERROR "Operating system non-supported (Windows)")
  endif (FATAL_ERROR_IF_OS_WINDOW)
  set (OS_WINDOWS 1)
elseif (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  if (FATAL_ERROR_IF_OS_LINUX)
    message (FATAL_ERROR "Operating system non-supported (Linux)")
  endif (FATAL_ERROR_IF_OS_LINUX)
  set (OS_LINUX 1)
elseif (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  if (FATAL_ERROR_IF_OS_MACOSX)
    message (FATAL_ERROR "Operating system non-supported (Mac OS X)")
  endif (FATAL_ERROR_IF_OS_MACOSX)
  set (OS_MACOSX 1)
else ()
  if (FATAL_ERROR_IF_UNKNOWN_OS)
    message (FATAL_ERROR "Unknown operating system (${CMAKE_SYSTEM_NAME})")
  else (FATAL_ERROR_IF_UNKNOWN_OS)
    message (WARNING "Unknown operating system (${CMAKE_SYSTEM_NAME}): problems may occur")
  endif (FATAL_ERROR_IF_UNKNOWN_OS)
endif ()

# Detect the architecture
include (CheckTypeSize)
check_type_size (void* SIZEOF_VOID_PTR)
if ("${SIZEOF_VOID_PTR}" STREQUAL "4")
  if (FATAL_ERROR_IF_ARCH_32B)
    message (FATAL_ERROR "Architecture non-supported (32 bits)")
  endif (FATAL_ERROR_IF_ARCH_32B)
  set (ARCH_32BITS 1)
elseif ("${SIZEOF_VOID_PTR}" STREQUAL "8")
  if (FATAL_ERROR_IF_ARCH_64B)
    message (FATAL_ERROR "Architecture non-supported (64 bits)")
  endif (FATAL_ERROR_IF_ARCH_64B)
  set (ARCH_64BITS 1)
else ()
  if (FATAL_ERROR_IF_UNKNOWN_ARCH)
    message (FATAL_ERROR "Unknown architecture")
  else (FATAL_ERROR_IF_UNKNOWN_ARCH)
    message (WARNING "Unknown architecture: problems may occur")
  endif (FATAL_ERROR_IF_UNKNOWN_ARCH)
endif ()
